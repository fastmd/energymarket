wb = xlsx_package.workbook
xlsx_package.use_autowidth = true

wb.styles do |style|
    defaults =  { :style => :thin, :color => "000000" }
    borders = Hash.new do |hash, key|
       hash[key] = wb.styles.add_style :border => defaults.merge( { :edges => key.to_s.split('_').map(&:to_sym) } )
    end
    top_row =  [borders[:top_left], borders[:top], borders[:top], borders[:top_right]]
    middle_row = [borders[:left], nil, nil, borders[:right]]
    bottom_row = [borders[:bottom_left], borders[:bottom], borders[:bottom], borders[:bottom_right]]     

    lsimple_cell = style.add_style(:border => { :style => :thin, :color => "000000", :edges => [:left, :right] },
                                   alignment: { horizontal: :left, vertical: :center, wrap_text: :true})
    simple_cell = style.add_style( :border => { :style => :thin, :color => "000000", :edges => [:left, :right] },
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true })
    lsimples_cell = style.add_style(:border => { :style => :thin, :color => "000000", :edges => [:top, :bottom] },
                                   alignment: { horizontal: :left, vertical: :center, wrap_text: :true},
                                   :b => true, :bg_color => "e6ffe6")
    simples_cell = style.add_style( :border => { :style => :thin, :color => "000000", :edges => [:left, :right, :top, :bottom] },
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true },
                                   :b => true, :bg_color => "e6ffe6") 
    simplesel_cell = style.add_style( :border => { :style => :thin, :color => "000000", :edges => [:left, :top, :bottom] },
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true },
                                   :b => true, :bg_color => "e6ffe6")
    simpleser_cell = style.add_style( :border => { :style => :thin, :color => "000000", :edges => [:right, :top, :bottom] },
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true },
                                   :b => true, :bg_color => "e6ffe6") 
    simplese_cell = style.add_style( :border => { :style => :thin, :color => "000000", :edges => [:top, :bottom] },
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true },
                                   :b => true, :bg_color => "e6ffe6")  
    header_cell = style.add_style(:fg_color=> "000000",
                                  :b => true,
                                  :bg_color => "FFFFFF",
                                  :sz => 14, 
                                  alignment: { horizontal: :center, vertical: :center, wrap_text: :false })
    theader_cell = style.add_style(:b => true,
                                   :sz => 12,
                                   :bg_color => "E0E0E0",
                                   :border => { :style => :thin, :color => "000000", :edges => [:left, :right, :top, :bottom] }, 
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true })
    theaderb_cell = style.add_style(:b => true,
                                   :sz => 12,
                                   :bg_color => "e6f2ff",
                                   :border => { :style => :thin, :color => "000000", :edges => [:left, :right, :top, :bottom] }, 
                                   alignment: { horizontal: :center, vertical: :center, wrap_text: :true })                                   
    last_cell = style.add_style( :border => { :style => :thin, :color => "000000", :edges => [:top] })    
    margins = {:left => 0.7, :right => 0.5, :top => 1.2, :bottom => 1.2, :header => 0.7, :footer => 0.7}
    setup = {:fit_to_width => 1, :orientation => :portrait, :paper_width => "210mm", :paper_height => "297mm"}
    options = {:grid_lines => false, :headings => false, :horizontal_centered => true}
    header_footer = {:different_first => false, :odd_header => '&L&F : &A&R&D &T', :odd_footer => 'pagina &C&P din &N'} 

	wb.add_worksheet(name: "Lista", :page_margins => margins, :page_setup => setup, :print_options => options, :header_footer => header_footer ) do |sheet|
	    sheet.add_row [nil, Time.now.strftime("Lista a fost generata %d.%m.%Y la %H:%M")] 
	    sheet.add_row [""]
	    widths = [5, 25, 15, 25, 15, 15, 15, 15, 15]
	    ltitle = []
	    @lista_title.each do |item|
	       ltitle[0] = item
	       sheet.add_row ltitle, style: [header_cell]
	    end   
	    sheet.merge_cells('A3:H3')
        sheet.merge_cells('A4:H4')
	    sheet.add_row [""] 	    
	    sheet.add_row @title1, 
    		           style: [theader_cell, theader_cell, theader_cell, theader_cell, theader_cell, theader_cell, theader_cell, theader_cell, theader_cell],
    		           :widths => widths    		           
	    sheet.add_row @title2, 
    		           style: [theaderb_cell, theaderb_cell, theaderb_cell, theaderb_cell, theaderb_cell, theaderb_cell, theaderb_cell, theaderb_cell, theaderb_cell],
    		           :widths => widths   		           
    	if !@report.nil? then	              
  			@report.each do |item|
  		    	case when (item[0].nil?) then
    				    sheet.add_row [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8]], 
    		              style: [simplese_cell, lsimples_cell, simplese_cell, simplese_cell, simplese_cell, simplese_cell, simplese_cell, simplese_cell, simplese_cell],
    		              :widths => widths  		    	
  		    	     when (item[0] == 'âˆ‘') then
    				    sheet.add_row [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8]], 
    		              style: [simplesel_cell, lsimples_cell, simplese_cell, simplese_cell, simples_cell, simples_cell, simples_cell, simples_cell, simples_cell],
    		              :widths => widths
    		         else       		    	
    		  		    sheet.add_row [item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8]], 
    		              style: [simple_cell, lsimple_cell, simple_cell, simple_cell, simple_cell, simple_cell, simple_cell, simple_cell, simple_cell],
    		              :widths => widths 
    			end                   		
    		end             
    	end    
     end    		
 end 
  